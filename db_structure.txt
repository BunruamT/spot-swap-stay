# Database Structure for ParkPass Parking Application

## Overview
This document outlines the database structure needed to implement a real backend for the ParkPass parking application. The current implementation uses a mock database with localStorage, but this structure is designed for a production-ready database system.

## Recommended Technology Stack
- **Database**: PostgreSQL (recommended) or MySQL
- **Backend**: Node.js with Express.js or Python with Django/FastAPI
- **ORM**: Prisma (Node.js) or SQLAlchemy (Python)
- **Authentication**: JWT tokens with refresh token mechanism
- **File Storage**: AWS S3 or Cloudinary for images
- **Real-time**: WebSocket or Server-Sent Events for live updates
- **Payment**: Stripe API integration
- **Maps**: Google Maps API or Mapbox
- **Email**: SendGrid or AWS SES for email verification and notifications

## Database Schema

### 1. Users Table
```sql
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    user_type ENUM('customer', 'owner') NOT NULL,
    email_verified BOOLEAN DEFAULT FALSE,
    email_verification_token VARCHAR(255),
    email_verification_expires TIMESTAMP,
    profile_image_url TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

-- Indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_user_type ON users(user_type);
CREATE INDEX idx_users_email_verification ON users(email_verification_token);
```

### 2. Vehicles Table
```sql
CREATE TABLE vehicles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    make VARCHAR(100) NOT NULL,
    model VARCHAR(100) NOT NULL,
    license_plate VARCHAR(20) NOT NULL,
    color VARCHAR(50),
    year INTEGER,
    is_default BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes
CREATE INDEX idx_vehicles_user_id ON vehicles(user_id);
CREATE INDEX idx_vehicles_license_plate ON vehicles(license_plate);

-- Constraint to limit vehicles per user
ALTER TABLE vehicles ADD CONSTRAINT check_vehicle_limit 
CHECK ((SELECT COUNT(*) FROM vehicles WHERE user_id = vehicles.user_id) <= 3);
```

### 3. Parking Spots Table
```sql
CREATE TABLE parking_spots (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    owner_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    address TEXT NOT NULL,
    latitude DECIMAL(10, 8) NOT NULL,
    longitude DECIMAL(11, 8) NOT NULL,
    total_slots INTEGER NOT NULL CHECK (total_slots > 0),
    available_slots INTEGER NOT NULL CHECK (available_slots >= 0),
    price DECIMAL(10, 2) NOT NULL CHECK (price >= 0),
    price_type ENUM('hour', 'day', 'month') NOT NULL,
    phone VARCHAR(20),
    is_active BOOLEAN DEFAULT TRUE,
    rating DECIMAL(3, 2) DEFAULT 0 CHECK (rating >= 0 AND rating <= 5),
    review_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes
CREATE INDEX idx_parking_spots_owner_id ON parking_spots(owner_id);
CREATE INDEX idx_parking_spots_location ON parking_spots(latitude, longitude);
CREATE INDEX idx_parking_spots_active ON parking_spots(is_active);
CREATE INDEX idx_parking_spots_price ON parking_spots(price, price_type);
```

### 4. Parking Spot Operating Hours Table
```sql
CREATE TABLE parking_spot_hours (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    spot_id UUID NOT NULL REFERENCES parking_spots(id) ON DELETE CASCADE,
    day_of_week INTEGER NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6), -- 0=Sunday, 6=Saturday
    is_open BOOLEAN DEFAULT TRUE,
    opening_time TIME,
    closing_time TIME,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(spot_id, day_of_week)
);

-- Indexes
CREATE INDEX idx_spot_hours_spot_id ON parking_spot_hours(spot_id);
```

### 5. Parking Spot Images Table
```sql
CREATE TABLE parking_spot_images (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    spot_id UUID NOT NULL REFERENCES parking_spots(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes
CREATE INDEX idx_spot_images_spot_id ON parking_spot_images(spot_id);
```

### 6. Amenities Table
```sql
CREATE TABLE amenities (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    icon VARCHAR(50),
    description TEXT
);

-- Insert default amenities
INSERT INTO amenities (name, icon) VALUES 
('CCTV Security', 'shield'),
('EV Charging', 'zap'),
('Covered Parking', 'umbrella'),
('Elevator Access', 'arrow-up'),
('Car Wash', 'droplets'),
('Valet Service', 'user'),
('24/7 Access', 'clock'),
('Disabled Access', 'accessibility');
```

### 7. Parking Spot Amenities Junction Table
```sql
CREATE TABLE parking_spot_amenities (
    spot_id UUID REFERENCES parking_spots(id) ON DELETE CASCADE,
    amenity_id UUID REFERENCES amenities(id) ON DELETE CASCADE,
    PRIMARY KEY (spot_id, amenity_id)
);

-- Indexes
CREATE INDEX idx_spot_amenities_spot_id ON parking_spot_amenities(spot_id);
CREATE INDEX idx_spot_amenities_amenity_id ON parking_spot_amenities(amenity_id);
```

### 8. Bookings Table
```sql
CREATE TABLE bookings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    spot_id UUID NOT NULL REFERENCES parking_spots(id),
    user_id UUID NOT NULL REFERENCES users(id),
    vehicle_id UUID NOT NULL REFERENCES vehicles(id),
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    total_cost DECIMAL(10, 2) NOT NULL,
    status ENUM('pending', 'active', 'completed', 'cancelled') DEFAULT 'pending',
    qr_code VARCHAR(255) UNIQUE NOT NULL,
    pin VARCHAR(4) NOT NULL,
    payment_intent_id VARCHAR(255), -- Stripe payment intent ID
    payment_status ENUM('pending', 'paid', 'failed', 'refunded') DEFAULT 'pending',
    check_in_time TIMESTAMP,
    check_out_time TIMESTAMP,
    extension_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT valid_booking_time CHECK (end_time > start_time)
);

-- Indexes
CREATE INDEX idx_bookings_spot_id ON bookings(spot_id);
CREATE INDEX idx_bookings_user_id ON bookings(user_id);
CREATE INDEX idx_bookings_status ON bookings(status);
CREATE INDEX idx_bookings_time_range ON bookings(start_time, end_time);
CREATE INDEX idx_bookings_qr_code ON bookings(qr_code);
CREATE INDEX idx_bookings_pin ON bookings(pin);
```

### 9. Booking Extensions Table
```sql
CREATE TABLE booking_extensions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    booking_id UUID NOT NULL REFERENCES bookings(id) ON DELETE CASCADE,
    original_end_time TIMESTAMP NOT NULL,
    new_end_time TIMESTAMP NOT NULL,
    additional_hours INTEGER NOT NULL,
    additional_cost DECIMAL(10, 2) NOT NULL,
    status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP,
    processed_by UUID REFERENCES users(id)
);

-- Indexes
CREATE INDEX idx_extensions_booking_id ON booking_extensions(booking_id);
CREATE INDEX idx_extensions_status ON booking_extensions(status);
```

### 10. Reviews Table
```sql
CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id),
    spot_id UUID NOT NULL REFERENCES parking_spots(id),
    booking_id UUID REFERENCES bookings(id),
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    is_anonymous BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(user_id, booking_id) -- One review per booking
);

-- Indexes
CREATE INDEX idx_reviews_spot_id ON reviews(spot_id);
CREATE INDEX idx_reviews_user_id ON reviews(user_id);
CREATE INDEX idx_reviews_rating ON reviews(rating);
```

### 11. Review Images Table
```sql
CREATE TABLE review_images (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    review_id UUID NOT NULL REFERENCES reviews(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes
CREATE INDEX idx_review_images_review_id ON review_images(review_id);
```

### 12. Availability Blocks Table
```sql
CREATE TABLE availability_blocks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    spot_id UUID NOT NULL REFERENCES parking_spots(id) ON DELETE CASCADE,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    block_type ENUM('maintenance', 'blocked', 'reserved') NOT NULL,
    slots_affected INTEGER NOT NULL,
    reason TEXT,
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT valid_block_time CHECK (end_time > start_time)
);

-- Indexes
CREATE INDEX idx_availability_blocks_spot_id ON availability_blocks(spot_id);
CREATE INDEX idx_availability_blocks_time_range ON availability_blocks(start_time, end_time);
```

### 13. Payments Table
```sql
CREATE TABLE payments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    booking_id UUID NOT NULL REFERENCES bookings(id),
    stripe_payment_intent_id VARCHAR(255),
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    status ENUM('pending', 'succeeded', 'failed', 'cancelled', 'refunded') DEFAULT 'pending',
    payment_method VARCHAR(50), -- 'card', 'qr', 'wallet'
    transaction_id VARCHAR(255),
    failure_reason TEXT,
    refund_amount DECIMAL(10, 2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes
CREATE INDEX idx_payments_booking_id ON payments(booking_id);
CREATE INDEX idx_payments_status ON payments(status);
CREATE INDEX idx_payments_stripe_id ON payments(stripe_payment_intent_id);
```

### 14. Notifications Table
```sql
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type ENUM('booking_reminder', 'extension_reminder', 'owner_notification', 'system', 'promotion') NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    action_url TEXT,
    metadata JSONB, -- Additional data for the notification
    scheduled_for TIMESTAMP, -- For scheduled notifications
    sent_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_unread ON notifications(user_id, is_read);
CREATE INDEX idx_notifications_scheduled ON notifications(scheduled_for);
CREATE INDEX idx_notifications_type ON notifications(type);
```

### 15. User Settings Table
```sql
CREATE TABLE user_settings (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    theme ENUM('light', 'dark', 'system') DEFAULT 'light',
    language VARCHAR(5) DEFAULT 'en',
    booking_reminders BOOLEAN DEFAULT TRUE,
    extension_reminders BOOLEAN DEFAULT TRUE,
    email_notifications BOOLEAN DEFAULT TRUE,
    push_notifications BOOLEAN DEFAULT TRUE,
    promotions BOOLEAN DEFAULT FALSE,
    system_updates BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 16. Sessions Table (for authentication)
```sql
CREATE TABLE sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    refresh_token VARCHAR(255) UNIQUE NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ip_address INET,
    user_agent TEXT
);

-- Indexes
CREATE INDEX idx_sessions_user_id ON sessions(user_id);
CREATE INDEX idx_sessions_refresh_token ON sessions(refresh_token);
CREATE INDEX idx_sessions_expires_at ON sessions(expires_at);
```

### 17. Email Verification Logs Table
```sql
CREATE TABLE email_verification_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    email VARCHAR(255) NOT NULL,
    verification_token VARCHAR(255) NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    verified_at TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    attempt_count INTEGER DEFAULT 1
);

-- Indexes
CREATE INDEX idx_email_verification_user_id ON email_verification_logs(user_id);
CREATE INDEX idx_email_verification_token ON email_verification_logs(verification_token);
```

## API Endpoints Structure

### Authentication
- `POST /api/auth/register` - User registration with email verification
- `POST /api/auth/login` - User login
- `POST /api/auth/logout` - User logout
- `POST /api/auth/refresh` - Refresh access token
- `POST /api/auth/forgot-password` - Password reset request
- `POST /api/auth/reset-password` - Password reset confirmation
- `POST /api/auth/verify-email` - Email verification
- `POST /api/auth/resend-verification` - Resend verification email

### Users
- `GET /api/users/profile` - Get user profile
- `PUT /api/users/profile` - Update user profile
- `GET /api/users/settings` - Get user settings
- `PUT /api/users/settings` - Update user settings

### Vehicles
- `GET /api/vehicles` - Get user vehicles
- `POST /api/vehicles` - Add new vehicle (max 3)
- `PUT /api/vehicles/:id` - Update vehicle
- `DELETE /api/vehicles/:id` - Delete vehicle

### Parking Spots
- `GET /api/spots` - Search parking spots with filters
- `GET /api/spots/:id` - Get spot details
- `POST /api/spots` - Create parking spot (owner)
- `PUT /api/spots/:id` - Update parking spot (owner)
- `DELETE /api/spots/:id` - Delete parking spot (owner)
- `GET /api/spots/owner/:ownerId` - Get spots by owner
- `PUT /api/spots/:id/hours` - Update operating hours
- `GET /api/spots/:id/availability` - Get availability blocks
- `POST /api/spots/:id/availability` - Create availability block

### Bookings
- `GET /api/bookings` - Get user bookings
- `POST /api/bookings` - Create new booking
- `GET /api/bookings/:id` - Get booking details
- `PUT /api/bookings/:id/extend` - Request booking extension
- `PUT /api/bookings/:id/cancel` - Cancel booking
- `POST /api/bookings/validate` - Validate QR/PIN for entry

### Reviews
- `GET /api/reviews/spot/:spotId` - Get spot reviews
- `POST /api/reviews` - Create review (only after completed booking)
- `PUT /api/reviews/:id` - Update review
- `DELETE /api/reviews/:id` - Delete review

### Notifications
- `GET /api/notifications` - Get user notifications
- `PUT /api/notifications/:id/read` - Mark notification as read
- `PUT /api/notifications/read-all` - Mark all notifications as read
- `POST /api/notifications/schedule` - Schedule notification (system)

### Payments
- `POST /api/payments/create-intent` - Create payment intent
- `POST /api/payments/confirm` - Confirm payment
- `POST /api/payments/webhook` - Stripe webhook

### Admin (Owner)
- `GET /api/admin/dashboard` - Dashboard stats
- `GET /api/admin/bookings` - All bookings for owner's spots
- `GET /api/admin/reviews` - All reviews for owner's spots
- `GET /api/admin/revenue` - Revenue analytics
- `GET /api/admin/extensions` - Pending extension requests
- `PUT /api/admin/extensions/:id` - Approve/reject extension

## Notification System Implementation

### Email Verification System (Currently Commented Out)

```javascript
// Email verification service
class EmailVerificationService {
  /**
   * Send verification email to user
   * To enable: Uncomment this function and configure email service
   */
  // async sendVerificationEmail(user) {
  //   const token = crypto.randomBytes(32).toString('hex');
  //   const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours
  //   
  //   // Save verification token to database
  //   await db.query(`
  //     UPDATE users 
  //     SET email_verification_token = $1, email_verification_expires = $2 
  //     WHERE id = $3
  //   `, [token, expiresAt, user.id]);
  //   
  //   // Send email using your preferred service (SendGrid, AWS SES, etc.)
  //   const verificationUrl = `${process.env.FRONTEND_URL}/verify-email?token=${token}`;
  //   
  //   await emailService.send({
  //     to: user.email,
  //     subject: 'Verify your ParkPass account',
  //     template: 'email-verification',
  //     data: { name: user.name, verificationUrl }
  //   });
  // }

  /**
   * Verify email token
   * To enable: Uncomment and implement
   */
  // async verifyEmail(token) {
  //   const user = await db.query(`
  //     SELECT * FROM users 
  //     WHERE email_verification_token = $1 
  //     AND email_verification_expires > NOW()
  //   `, [token]);
  //   
  //   if (!user) {
  //     throw new Error('Invalid or expired verification token');
  //   }
  //   
  //   await db.query(`
  //     UPDATE users 
  //     SET email_verified = true, 
  //         email_verification_token = NULL,
  //         email_verification_expires = NULL
  //     WHERE id = $1
  //   `, [user.id]);
  //   
  //   return user;
  // }
}

// To enable email verification:
// 1. Uncomment the above functions
// 2. Configure your email service (SendGrid, AWS SES, etc.)
// 3. Set up email templates
// 4. Add verification check to protected routes
// 5. Update registration flow to send verification email
```

### Notification Scheduling System

```javascript
// Notification scheduler for booking reminders
class NotificationScheduler {
  /**
   * Schedule booking reminder notifications
   */
  async scheduleBookingReminders(booking) {
    const startTime = new Date(booking.start_time);
    const endTime = new Date(booking.end_time);
    
    // Schedule start reminder (30 minutes before)
    const startReminder = new Date(startTime.getTime() - 30 * 60 * 1000);
    await this.scheduleNotification({
      user_id: booking.user_id,
      title: 'Parking Session Starting Soon',
      message: `Your parking session starts in 30 minutes at ${booking.spot_name}`,
      type: 'booking_reminder',
      scheduled_for: startReminder,
      action_url: '/bookings'
    });
    
    // Schedule end reminder (30 minutes before)
    const endReminder = new Date(endTime.getTime() - 30 * 60 * 1000);
    await this.scheduleNotification({
      user_id: booking.user_id,
      title: 'Extend Your Parking?',
      message: 'Your parking session ends in 30 minutes. Would you like to extend?',
      type: 'extension_reminder',
      scheduled_for: endReminder,
      action_url: '/bookings',
      metadata: { booking_id: booking.id, can_extend: true }
    });
  }
  
  /**
   * Process scheduled notifications
   * Run this as a cron job every minute
   */
  async processScheduledNotifications() {
    const notifications = await db.query(`
      SELECT * FROM notifications 
      WHERE scheduled_for <= NOW() 
      AND sent_at IS NULL
    `);
    
    for (const notification of notifications) {
      await this.sendNotification(notification);
      await db.query(`
        UPDATE notifications 
        SET sent_at = NOW() 
        WHERE id = $1
      `, [notification.id]);
    }
  }
}
```

## Key Features to Implement

### 1. Real-time Updates
- WebSocket connections for live booking updates
- Real-time availability changes
- Instant notifications

### 2. Geolocation & Maps
- GPS-based spot discovery
- Route navigation integration
- Distance calculations
- Map pin placement for spot creation

### 3. Payment Processing
- Stripe integration for secure payments
- Multiple payment methods
- Automatic refunds for cancellations

### 4. Security
- JWT authentication with refresh tokens
- Rate limiting
- Input validation and sanitization
- SQL injection prevention
- Email verification system

### 5. Performance Optimization
- Database indexing
- Caching with Redis
- Image optimization and CDN
- API response pagination

### 6. Monitoring & Analytics
- Application logging
- Error tracking (Sentry)
- Performance monitoring
- Business analytics

### 7. Scalability Considerations
- Database connection pooling
- Horizontal scaling capability
- Load balancing
- Microservices architecture (future)

## Environment Variables
```env
# Database
DATABASE_URL=postgresql://username:password@localhost:5432/parkpass
REDIS_URL=redis://localhost:6379

# Authentication
JWT_SECRET=your-jwt-secret
JWT_REFRESH_SECRET=your-refresh-secret
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# Stripe
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# AWS S3
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_S3_BUCKET=parkpass-images

# Google Maps
GOOGLE_MAPS_API_KEY=your-google-maps-key

# Email Service (SendGrid example)
SENDGRID_API_KEY=your-sendgrid-key
FROM_EMAIL=noreply@parkpass.com

# Email (Alternative - SMTP)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# App
NODE_ENV=development
PORT=3000
FRONTEND_URL=http://localhost:5173

# Notification Settings
ENABLE_EMAIL_VERIFICATION=false
ENABLE_PUSH_NOTIFICATIONS=true
NOTIFICATION_CHECK_INTERVAL=60000
```

## Setup Instructions for Supabase

### 1. Database Setup
1. Create a new Supabase project
2. Run the SQL schema provided above in the SQL editor
3. Enable Row Level Security (RLS) for all tables
4. Set up appropriate RLS policies

### 2. Authentication Setup
1. Configure email templates in Supabase Auth
2. Set up email verification (optional)
3. Configure JWT settings

### 3. Storage Setup
1. Create storage buckets for:
   - `parking-spot-images`
   - `review-images`
   - `profile-images`
2. Set up storage policies

### 4. Real-time Setup
1. Enable real-time for notifications table
2. Configure real-time policies

This database structure provides a solid foundation for a production-ready parking application with all the features demonstrated in the current mock implementation, plus additional features for scalability and real-world usage.